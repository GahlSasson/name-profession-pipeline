name: Airtable Smoke Test (Manual)
on: { workflow_dispatch: {} }

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      AIRTABLE_TOKEN:      ${{ secrets.AIRTABLE_TOKEN }}      # PAT
      AIRTABLE_API_KEY:    ${{ secrets.AIRTABLE_API_KEY }}    # optional fallback
      AIRTABLE_BASE_ID:    ${{ secrets.AIRTABLE_BASE_ID }}
      AIRTABLE_TABLE_ID:   ${{ secrets.AIRTABLE_TABLE_ID }}   # optional; we’ll use NAME if not set
      AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }} # you have this
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install requests
        run: python -m pip install --upgrade pip && python -m pip install requests

      - name: Insert one test record (robust; safe even if we don’t know your column names)
        run: |
          python - <<'PY'
          import os, sys, time, json, urllib.parse, requests, string

          BASE   = os.getenv("AIRTABLE_BASE_ID")
          TOKEN  = (os.getenv("AIRTABLE_TOKEN") or os.getenv("AIRTABLE_API_KEY") or "")
          TABLE  = os.getenv("AIRTABLE_TABLE_ID") or os.getenv("AIRTABLE_TABLE_NAME")
          if not (BASE and TOKEN and TABLE):
              sys.exit("Missing AIRTABLE_* envs (need BASE_ID, TOKEN/API_KEY, and TABLE_ID or TABLE_NAME).")

          # Sanitize token
          raw = TOKEN
          TOKEN = TOKEN.strip().replace("\r","").replace("\n","").replace("\t","")
          if any(ch not in string.printable for ch in TOKEN):
              sys.exit("AIRTABLE token has non-printable characters. Edit the secret and paste a clean one-line token.")
          if TOKEN != raw:
              print("[WARN] Token contained whitespace/newlines; sanitized at runtime.")

          H = {"Authorization": f"Bearer {TOKEN}", "Content-Type": "application/json"}
          enc_table = urllib.parse.quote(TABLE, safe="")
          url = f"https://api.airtable.com/v0/{BASE}/{enc_table}?typecast=true"

          ts = time.strftime("%Y-%m-%d %H:%M:%S")

          # Try a few payloads in order:
          candidates = [
              {},  # empty record
              {"Name": f"SMOKE TEST {ts}"},
              {"Full Name": f"SMOKE TEST {ts}"},
              {"full_name": f"SMOKE TEST {ts}"},
              {"Title": f"SMOKE TEST {ts}"},
              {"title": f"SMOKE TEST {ts}"},
          ]

          last_err = None
          for fields in candidates:
              payload = {"records": [{"fields": fields}]}
              try:
                  r = requests.post(url, headers=H, data=json.dumps(payload), timeout=60)
              except Exception as e:
                  sys.exit(f"Network error: {e}")
              print(f"[SMOKE] Try fields {list(fields.keys()) or ['<empty>']} -> {r.status_code}")
              if r.status_code < 400:
                  rec_id = (r.json().get("records") or [{}])[0].get("id")
                  print(f"[SMOKE] Inserted record id: {rec_id}")
                  break
              last_err = r.text
          else:
              print(last_err); sys.exit(1)
          PY
