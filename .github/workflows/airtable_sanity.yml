name: airtable_sanity

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
      AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
      AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }}

    steps:
      - name: Check secrets exist
        run: |
          [ -n "$AIRTABLE_API_KEY" ] || (echo "❌ Missing AIRTABLE_API_KEY" && exit 1)
          [ - n "$AIRTABLE_BASE_ID" ] || (echo "❌ Missing AIRTABLE_BASE_ID" && exit 1)
          [ -n "$AIRTABLE_TABLE_NAME" ] || (echo "❌ Missing AIRTABLE_TABLE_NAME" && exit 1)
          echo "✅ Secrets present."

      - name: Print secret lengths (safe)
        run: |
          python - <<'PY'
          import os
          for k in ("AIRTABLE_API_KEY","AIRTABLE_BASE_ID","AIRTABLE_TABLE_NAME"):
              v=os.environ.get(k,"")
              print(k, "length:", len(v))
          PY

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install requests
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: List bases token can access  (needs schema.bases:read)
        continue-on-error: true
        run: |
          python - <<'PY'
          import os, requests
          key=os.environ['AIRTABLE_API_KEY'].strip()
          r=requests.get("https://api.airtable.com/v0/meta/bases",
                         headers={"Authorization":f"Bearer {key}"})
          print("HTTP", r.status_code)
          print(r.text[:1500])
          PY

      - name: List tables in your AIRTABLE_BASE_ID
        continue-on-error: true
        run: |
          python - <<'PY'
          import os, requests
          key=os.environ['AIRTABLE_API_KEY'].strip()
          base=os.environ['AIRTABLE_BASE_ID'].strip()
          url=f"https://api.airtable.com/v0/meta/bases/{base}/tables"
          r=requests.get(url, headers={"Authorization":f"Bearer {key}"})
          print("HTTP", r.status_code)
          print(r.text[:2000])
          PY

      - name: GET 1 record from table (read test)
        continue-on-error: true
        run: |
          python - <<'PY'
          import os, requests
          key=os.environ['AIRTABLE_API_KEY'].strip()
          base=os.environ['AIRTABLE_BASE_ID'].strip()
          table=os.environ['AIRTABLE_TABLE_NAME'].strip()
          url=f"https://api.airtable.com/v0/{base}/{table}?maxRecords=1"
          r=requests.get(url, headers={"Authorization":f"Bearer {key}"})
          print("HTTP", r.status_code)
          print(r.text[:1000])
          PY

      - name: POST a test row (write test)
        continue-on-error: true
        run: |
          python - <<'PY'
          import os, requests, json
          key=os.environ['AIRTABLE_API_KEY'].strip()
          base=os.environ['AIRTABLE_BASE_ID'].strip()
          table=os.environ['AIRTABLE_TABLE_NAME'].strip()
          url=f"https://api.airtable.com/v0/{base}/{table}"
          headers={"Authorization":f"Bearer {key}","Content-Type":"application/json"}
          payload={"records":[{"fields":{"full_name":"_SMOKE_TEST_DELETE_ME","status":"Candidate"}}],"typecast":True}
          r=requests.post(url, headers=headers, data=json.dumps(payload))
          print("HTTP", r.status_code)
          print(r.text[:1000])
          PY
